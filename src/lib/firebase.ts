
// –≠–Ω—ç —Ñ–∞–π–ª –Ω—å Firebase-–∏–π–Ω –±“Ø—Ö “Ø–π–ª—á–∏–ª–≥—ç—ç–≥ —ç—Ö–ª“Ø“Ø–ª–∂, —Ç–æ—Ö–∏—Ä—É—É–ª–∞–Ω,
// –∞–ø–ø-—ã–Ω –±—É—Å–∞–¥ —Ö—ç—Å—ç–≥—Ç –∞—à–∏–≥–ª–∞—Ö –±–æ–ª–æ–º–∂—Ç–æ–π –±–æ–ª–≥–æ–∂ —ç–∫—Å–ø–æ—Ä—Ç–ª–æ—Ö “Ø“Ø—Ä—ç–≥—Ç—ç–π.

import { initializeApp, type FirebaseApp } from 'firebase/app';
import { getAuth, type Auth } from 'firebase/auth';
import { getAnalytics, isSupported as isAnalyticsSupported, type Analytics } from 'firebase/analytics';
import { getFirestore, type Firestore } from "firebase/firestore";
import {
  getMessaging,
  getToken,
  onMessage,
  isSupported as isMessagingSupported,
  type Messaging
} from 'firebase/messaging';
import { getStorage, type Storage } from 'firebase/storage';

// Firebase —Ç”©—Å–ª–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ (—ç–Ω—ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ Firebase console-–æ–æ—Å –∞–≤–Ω–∞).
const firebaseConfig = {
  apiKey: "AIzaSyC8fm6JfwUqtr_YBpg01hxo6JKAQQ8kgPc",
  authDomain: "mbad-c532e.firebaseapp.com",
  projectId: "mbad-c532e",
  storageBucket: "mbad-c532e.firebasestorage.app",
  messagingSenderId: "634830609207",
  appId: "1:634830609207:web:d23ecb61175f8ee56fd8b2",
  measurementId: "G-EHLS0LGKEM"
};

// Firebase –∞–ø–ø-—ã–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö.
const app: FirebaseApp = initializeApp(firebaseConfig);
console.log("Firebase App initialized");

// Firebase-–∏–π–Ω –≥–æ–ª “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥–∏–π–≥ —ç—Ö–ª“Ø“Ø–ª—ç—Ö.
const auth: Auth = getAuth(app);
const db: Firestore = getFirestore(app);
const storage: Storage = getStorage(app);
console.log("Auth, Firestore, and Storage initialized");

// Firebase Analytics-–∏–π–≥ –∑”©–≤—Ö”©–Ω —Ö”©—Ç”©—á –¥—ç—ç—Ä –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–≤–∞–ª —ç—Ö–ª“Ø“Ø–ª—ç—Ö.
let analytics: Analytics | undefined;
if (typeof window !== 'undefined') {
  isAnalyticsSupported().then((supported) => {
    if (supported) {
      analytics = getAnalytics(app);
      console.log("Firebase Analytics initialized");
    } else {
      console.log("Firebase Analytics not supported on this browser.");
    }
  }).catch(err => {
    console.error("Error checking Analytics support or initializing Analytics:", err);
  });
} else {
  console.log("Not in a browser environment, Firebase Analytics not initialized.");
}

// Firebase Cloud Messaging (FCM) “Ø–π–ª—á–∏–ª–≥—ç—ç–≥ –∞—é—É–ª–≥“Ø–π–≥—ç—ç—Ä —ç—Ö–ª“Ø“Ø–ª—ç—Ö singleton pattern.
// –≠–Ω—ç –Ω—å —Ö”©—Ç”©—á –¥—ç–º–∂–∏—Ö —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Å–Ω—ã –¥–∞—Ä–∞–∞ –∑”©–≤—Ö”©–Ω –Ω—ç–≥ —É–¥–∞–∞ —ç—Ö–ª“Ø“Ø–ª–Ω—ç.
let messagingSingleton: Messaging | null = null;
let messagingPromise: Promise<Messaging | null> | null = null;

const getInitializedMessaging = (): Promise<Messaging | null> => {
    if (messagingSingleton) {
        return Promise.resolve(messagingSingleton);
    }
    if (messagingPromise) {
        return messagingPromise;
    }

    messagingPromise = new Promise(async (resolve) => {
        if (typeof window !== 'undefined') {
            try {
                const supported = await isMessagingSupported();
                if (supported) {
                    console.log("Firebase.ts: Messaging is supported. Initializing...");
                    messagingSingleton = getMessaging(app);
                    console.log("Firebase.ts: Messaging SDK initialized.");
                    resolve(messagingSingleton);
                } else {
                    console.log("Firebase.ts: Firebase Messaging is not supported by isMessagingSupported().");
                    messagingSingleton = null; 
                    resolve(null);
                }
            } catch (err) {
                console.error('Firebase.ts: Failed to initialize Firebase Messaging SDK:', err);
                messagingSingleton = null; 
                resolve(null);
            }
        } else {
            console.log("Firebase.ts: Not in a browser environment, Firebase Messaging not initialized.");
            messagingSingleton = null; 
            resolve(null);
        }
    });
    return messagingPromise;
};

// –•—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω —Ç”©—Ö”©”©—Ä”©–º–∂–∏–π–Ω FCM token-–≥ –∞–≤–∞—Ö —Ñ—É–Ω–∫—Ü.
// –≠–Ω—ç token –Ω—å —Ç—É—Ö–∞–π–Ω —Ç”©—Ö”©”©—Ä”©–º–∂ —Ä“Ø“Ø push notification –∏–ª–≥—ç—ç—Ö—ç–¥ –∞—à–∏–≥–ª–∞–≥–¥–∞–Ω–∞.
export const requestForToken = async (): Promise<string | null> => {
  const messaging = await getInitializedMessaging();
  if (!messaging) {
    console.warn('requestForToken: Firebase Messaging instance is not available.');
    return null;
  }

  // Firebase console > Project settings > Cloud Messaging > Web configuration-–æ–æ—Å –∞–≤–∞—Ö VAPID key.
  const vapidKeyFromServer = "BKm-UFW7sk0sV3T_B1zwflA9LIsX2HaUwLQMgzG_7QrEC6pah0MN5ki8sWqDm4PLnfXtFoS7RNBHhMSyzSpOq_4";
  console.log("Attempting to get FCM token with VAPID key:", vapidKeyFromServer);

  try {
    const currentToken = await getToken(messaging, {
      vapidKey: vapidKeyFromServer
    });

    if (currentToken) {
      console.log('‚úÖ FCM Token:', currentToken);
      return currentToken;
    } else {
      console.warn('üö´ –¢–æ–∫–µ–Ω –∞–≤–∞—Ö –±–æ–ª–æ–º–∂–≥“Ø–π –±–∞–π–Ω–∞. Notification permission —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π —ç—Å–≤—ç–ª VAPID key –±—É—Ä—É—É –±–∞–π–∂ –º–∞–≥–∞–¥–≥“Ø–π.');
      return null;
    }
  } catch (err) {
    console.error('‚ùå FCM —Ç–æ–∫–µ–Ω –∞–≤–∞—Ö–∞–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞:', err);
    if (err instanceof Error && (err.message.includes('InvalidAccessError') || err.message.includes("applicationServerKey is not valid") || err.message.includes("token-subscribe-failed"))) {
        console.error('‚ùóÔ∏è VAPID key —ç—Å–≤—ç–ª Google Cloud —Ç”©—Å–ª–∏–π–Ω —Ç–æ—Ö–∏—Ä–≥–æ–æ (–ë–∏–ª–ª–∏–Ω–≥, OAuth Consent Screen) –±—É—Ä—É—É –±–∞–π—Ö –º–∞–≥–∞–¥–ª–∞–ª—Ç–∞–π. –ê—à–∏–≥–ª–∞–∂ –±—É–π VAPID key:', vapidKeyFromServer);
    }
    return null;
  }
};

// –ê–ø–ø –Ω—ç—ç–ª—Ç—Ç—ç–π –±–∞–π—Ö “Ø–µ–¥ (foreground) push notification —Ö“Ø–ª—ç—ç–∂ –∞–≤–∞—Ö listener-–≥ —Ç–æ—Ö–∏—Ä—É—É–ª–∞—Ö —Ñ—É–Ω–∫—Ü.
export const setupOnMessageListener = async (callback: (payload: any) => void): Promise<(() => void) | null> => {
  const messaging = await getInitializedMessaging();
  if (!messaging) {
    console.warn('setupOnMessageListener: Firebase Messaging instance is not available.');
    return null;
  }
  try {
    const unsubscribe = onMessage(messaging, (payload) => {
      console.log('üì© Foreground message received:', payload);
      callback(payload);
    });
    return unsubscribe;
  } catch (error) {
     console.error("Error setting up onMessage listener:", error);
     return null;
  }
};

// –≠—Ö–ª“Ø“Ø–ª—Å—ç–Ω “Ø–π–ª—á–∏–ª–≥—ç—ç–Ω“Ø“Ø–¥–∏–π–≥ —ç–∫—Å–ø–æ—Ä—Ç–ª–æ—Ö
export { app, auth, db, analytics, storage };
